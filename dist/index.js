
    const configAsString = '{"entry":"/Users/jason/Sites/jpme/src/app.tsx","output":{"path":"/Users/jason/Sites/jpme/dist","filename":"bundle.js"},"resolve":{"extensions":[".js",".ts",".tsx"],"unsafeCache":true,"modules":["node_modules"],"aliasFields":[],"mainFields":["module","main"]},"module":{"rules":[{"enforce":"pre","test":"_PxEgEr_.tsx$/","use":"eslint-loader"},{"test":"_PxEgEr_.ts$/","use":"ts-loader"},{"test":"_PxEgEr_.tsx$/","use":"ts-loader"},{"test":"_PxEgEr_.css$/","use":["css-loader?modules"]}],"unknownContextRequest":".","unknownContextRegExp":false,"unknownContextRecursive":true,"unknownContextCritical":true,"exprContextRequest":".","exprContextRegExp":false,"exprContextRecursive":true,"exprContextCritical":true,"wrappedContextRegExp":"_PxEgEr_*/","wrappedContextRecursive":true,"wrappedContextCritical":false,"unsafeCache":true}}';

    module.exports = JSON.parse(configAsString, (key, val) =>
      typeof val === 'string' && val.substring(0, 8) === '_PxEgEr_' ? new RegExp( '\\' + val.slice(8, -1)) : val);
  